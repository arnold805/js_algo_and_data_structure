When you don't need any ordering, objects are an excellent choice!

Insertion -  O(1)
Removal   -  O(1)
Searching -  O(N) linear
Access    -  O(1)


Object Methods

Object.keys    -  O(N)
Object.values  -  O(N)
Object.entries -  O(N)
hasOwnProperty -  O(1) true/false

Arrays

when you need order, use arrays

Insertion - It depends... Pushing(end) = O(1),  Pop(beginning) = O(N) need to re-index array
Removal   - It depends... Pushing(end) = O(1),  Pop(begenning) = O(N) need to re-index array
Searching - O(N)
Access    - O(1)

Push & pop always faster than shift & unshift



Big O of Array Operations

try to add + remove from end

push - O(1)
pop - O(1)
shift - O(N)
unshift - O(N)
concat - O(N)        O(N) + M
slice - O(N)
splice - O(N)
sort - O(N * log N)
forEach/map/filter/reduce/etc. -  O(N)